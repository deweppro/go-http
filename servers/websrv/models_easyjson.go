// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package websrv

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComDewepproGoHttpV2ServersWebsrv(in *jlexer.Lexer, out *Headers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "proxy_headers":
			if in.IsNull() {
				in.Skip()
				out.ProxyHeaders = nil
			} else {
				in.Delim('[')
				if out.ProxyHeaders == nil {
					if !in.IsDelim(']') {
						out.ProxyHeaders = make([]string, 0, 4)
					} else {
						out.ProxyHeaders = []string{}
					}
				} else {
					out.ProxyHeaders = (out.ProxyHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ProxyHeaders = append(out.ProxyHeaders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default_headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DefaultHeaders = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.DefaultHeaders)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDewepproGoHttpV2ServersWebsrv(out *jwriter.Writer, in Headers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"proxy_headers\":"
		out.RawString(prefix[1:])
		if in.ProxyHeaders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.ProxyHeaders {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"default_headers\":"
		out.RawString(prefix)
		if in.DefaultHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.DefaultHeaders {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Headers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComDewepproGoHttpV2ServersWebsrv(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Headers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDewepproGoHttpV2ServersWebsrv(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Headers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComDewepproGoHttpV2ServersWebsrv(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Headers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDewepproGoHttpV2ServersWebsrv(l, v)
}
func easyjsonD2b7633eDecodeGithubComDewepproGoHttpV2ServersWebsrv1(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "http":
			(out.HTTP).UnmarshalEasyJSON(in)
		case "headers":
			(out.Headers).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComDewepproGoHttpV2ServersWebsrv1(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"http\":"
		out.RawString(prefix[1:])
		(in.HTTP).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		(in.Headers).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComDewepproGoHttpV2ServersWebsrv1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComDewepproGoHttpV2ServersWebsrv1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComDewepproGoHttpV2ServersWebsrv1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComDewepproGoHttpV2ServersWebsrv1(l, v)
}
